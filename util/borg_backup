#!/bin/bash

LOG="/var/log/backup.log"

exec > >(tee -a $LOG) 2>&1

while getopts p:t:c:e: option
do
 case "${option}"
 in
 t) TYPE=${OPTARG};;
 p) REPO_PATH=${OPTARG};;
 e) EXPORT_PATH=${OPTARG};;
 c) CUSTOM_BK_PATHS=${OPTARG};; # NYI
 esac
done

if [[ -z "$REPO_PATH" ]]; then
    echo "Invalid path, usage: -p /path/to/borg/repo"
    exit 1
fi


case $TYPE in
    rootfs) BK_PATHS="/etc /root /var /usr/local /usr/src/linux/.config";;
    home) BK_PATHS="/home/mabez" ;;
    full) BK_PATHS="/" ;;
    *) echo "-t must be 'rootfs' or 'home' or 'full'" 
       exit 1 ;;
esac
    


echo "Using repo path: $REPO_PATH. Initialing a $TYPE backup."

# Setting this, so the repo does not need to be given on the commandline:
#export BORG_REPO=ssh://username@example.com:2022/~/backup/main

# Setting this, so you won't be asked for your repository passphrase:
export BORG_PASSPHRASE='mabez'
# or this to ask an external program to supply the passphrase:
#export BORG_PASSCOMMAND='pass show backup'

# some helpers and error handling:
info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
now () { date -u +"%Y-%m-%dT%H:%M:%S"; }
web_sync () { 
    echo "Syncing to gdrive"
    rclone --config /home/mabez/.config/rclone/rclone.conf sync $EXPORT_PATH gdrive:/Backups/Gentoo
}
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

info "Starting backup of $BK_PATHS"
info "Mounting /backups"
# Backup the most important directories into an archive named after
# the machine this script is currently running on:
# When 2TB is installed start backing up VMS?

ARCHIVE_NAME="$TYPE-$(hostname)-$(now)"

borg create                         \
    --filter AME                    \
    --list                          \
    --stats                         \
    --show-rc                       \
    --compression lz4               \
    --exclude-caches                \
    --exclude '/home/*/.cache/*'    \
    --exclude '/home/*/.mozilla/*'  \
    --exclude '/var/cache/*'        \
    --exclude '/var/tmp/*'          \
    --exclude '/var/log/*'          \
    --exclude '/hugepages'          \
    --exclude '/proc'               \
    --exclude '/sys'                \
    --exclude '/backup'             \
    --exclude '/dev'                \
    --exclude '/media'              \
    --exclude '/tmp'                \
    --exclude '/cpusets'            \
    --exclude '/mnt'                \
    --exclude '/run'                \
    --exclude '/vms'                \
    --exclude '*.o'                 \
    --exclude '*.bak'               \
    --exclude '*.tmp'               \
    --exclude '/usr/portage/distfiles/*'               \
    --exclude '/home/*/downloads/*'  \
    --exclude '/home/*/downloads/*'  \
                                    \
    $REPO_PATH::$ARCHIVE_NAME            \
    $BK_PATHS

backup_exit=$?

info "Pruning repository"

# Use the `prune` subcommand to maintain 7 daily, 4 weekly and 6 monthly
# archives of THIS machine. The '{hostname}-' prefix is very important to
# limit prune's operation to this machine's archives and not apply to
# other machines' archives also:

borg prune $REPO_PATH                         \
    --list                          \
    --prefix "$TYPE-$(hostname)"       \
    --show-rc                       \
    --keep-daily    7               \
    --keep-weekly   4               \
    --keep-monthly  6               \

prune_exit=$?

# use highest exit code as global exit code
global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))

if [ ${global_exit} -eq 1 ];
then
    info "Backup and/or Prune finished with a warning"
fi

if [ ${global_exit} -gt 1 ];
then
    info "Backup and/or Prune finished with an error"
fi

info "Unmounting /backups"

if [[ ! -z "$EXPORT_PATH" ]]; then
    echo "Exporting $ARCHIVE_NAME to $EXPORT_PATH"
    borg export-tar $REPO_PATH::$ARCHIVE_NAME "$EXPORT_PATH/$ARCHIVE_NAME.tar.gz"
    web_sync
fi

echo "Backup complete."

exit ${global_exit}
